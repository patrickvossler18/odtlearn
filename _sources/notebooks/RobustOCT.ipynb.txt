{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "373fd5ec",
   "metadata": {
    "cell_id": "dc6f466fd2994dbc80cf4e4da3be362f",
    "deepnote_cell_height": 83.5,
    "deepnote_cell_type": "markdown",
    "tags": []
   },
   "source": [
    "# `RobustTreeClassifier` Examples"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "65b403f6",
   "metadata": {
    "cell_id": "00001-5aa34266-f09d-41a6-aea8-7d1b5d36257a",
    "deepnote_cell_height": 144.796875,
    "deepnote_cell_type": "markdown",
    "owner_user_id": "3c75c737-6c37-465a-aa9b-4b298c75816b"
   },
   "source": [
    "<!-- <font size=\"3.5\">We use a tailored Benders decomposition algorithm to solve this formulation:\n",
    "</font>\n",
    "\n",
    "\n",
    "<p align=\"left\">\n",
    "    <img src=\"./odtlearn/docs/_static/img/robust_algorithm.png\" alt=\"robust_algorithm\" style=\"width:500px;\"/>\n",
    "</p>  -->\n",
    "\n",
    "## Example 1: Synthetic Data Without Specified Shifts\n",
    "If costs and/or budget is not specified, then we will produce the same result as an optimal strong classification tree.\n",
    "\n",
    "As an example, say that we are given this training set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "22254eb6",
   "metadata": {
    "cell_id": "00002-ec1b8b46-8347-44be-88eb-d2c0ff104528",
    "deepnote_cell_height": 508,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 1198,
    "execution_start": 1664769662078,
    "source_hash": "986acf91"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\"\"\"\n",
    "    X2\n",
    "    |               |\n",
    "    |               |\n",
    "    1    + +        |    -\n",
    "    |               |   \n",
    "    |---------------|-------------\n",
    "    |               |\n",
    "    0    - - - -    |    + + +\n",
    "    |    - - -      |\n",
    "    |______0________|_______1_______X1\n",
    "\"\"\"\n",
    "X = np.array(\n",
    "    [\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [1, 0],\n",
    "        [1, 0],\n",
    "        [1, 0],\n",
    "        [1, 1],\n",
    "        [0, 1],\n",
    "        [0, 1],\n",
    "    ]\n",
    ")\n",
    "X = pd.DataFrame(X, columns=[\"X1\", \"X2\"])\n",
    "\n",
    "y = np.array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "87b66e70",
   "metadata": {
    "cell_id": "f5d869ce3ae0415ca6b86aab044f6460",
    "deepnote_cell_height": 74.796875,
    "deepnote_cell_type": "markdown",
    "owner_user_id": "2bc00ffa-8da0-4406-b26d-9986ca85f208",
    "tags": []
   },
   "source": [
    "If either `costs` or `budget` is not specified, the optimal classification tree will be produced (i.e., a tree that does not account for distribution shifts)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bccf620c",
   "metadata": {
    "cell_id": "00003-ba6613f0-07d0-4855-badb-8ab0fcfd487c",
    "deepnote_cell_height": 250.6875,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 565,
    "execution_start": 1664769682643,
    "scrolled": true,
    "source_hash": "7db50d93"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set parameter Username\n",
      "Academic license - for non-commercial use only - expires 2024-02-21\n"
     ]
    }
   ],
   "source": [
    "from odtlearn.robust_oct import RobustOCT\n",
    " \n",
    "robust_classifier = RobustOCT(\n",
    "        depth = 2, \n",
    "        time_limit = 60\n",
    "    )\n",
    "robust_classifier.fit(X, y)\n",
    "predictions = robust_classifier.predict(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4f7e4e06",
   "metadata": {
    "cell_id": "8504ebdbd679412689f83492cd8f7a4f",
    "deepnote_cell_height": 362.734375,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 357,
    "execution_start": 1664769689116,
    "source_hash": "a3f1115a",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#########node  1\n",
      "Feature:  X2 , Cutoff:  0\n",
      "#########node  2\n",
      "Feature:  X1 , Cutoff:  0\n",
      "#########node  3\n",
      "Feature:  X1 , Cutoff:  0\n",
      "#########node  4\n",
      "leaf 0\n",
      "#########node  5\n",
      "leaf 1\n",
      "#########node  6\n",
      "leaf 1\n",
      "#########node  7\n",
      "leaf 0\n"
     ]
    }
   ],
   "source": [
    "robust_classifier.print_tree()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "95997b6a",
   "metadata": {
    "cell_id": "272908eee5d346a3b82cf3a0aa62c4e1",
    "deepnote_cell_height": 552,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     406
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 1265,
    "execution_start": 1664769691141,
    "source_hash": "f06c109e",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10, 5))\n",
    "robust_classifier.plot_tree()\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "b73ea5f5",
   "metadata": {
    "cell_id": "00004-c066bdea-caf9-4089-9fa1-ee2e8d323ad6",
    "deepnote_cell_height": 231.984375,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "## Example 2: synthetic data with specified shifts\n",
    "\n",
    "We take the same synthetic data from Example 1, but now add distribution shifts with the following schema:\n",
    "- For 5 samples at $[0,0]$, pay a cost of 1 to perturb $X_1$ and get $[1,0]$\n",
    "- For the 1 sample at $[1,1]$, pay a cost of 1 to perturb $X_2$ to get $[1,0]$\n",
    "- All other perturbations are not allowed\n",
    "\n",
    "First, define these costs, which have the same shape and features as your input sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5816b3a0",
   "metadata": {
    "cell_id": "00005-ec8f4aac-e1c1-486b-a079-6d46a8a9ef3b",
    "deepnote_cell_height": 166,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 1,
    "execution_start": 1664769701276,
    "source_hash": "92e9e3b9"
   },
   "outputs": [],
   "source": [
    "# Note: 10 is a proxy for infinite cost, as it is over the allowed budgets we will specify\n",
    "costs = np.array([[1,10],[1,10],[1,10],[1,10],[1,10],[10,10],[10,10],\n",
    "                  [10,10],[10,10],[10,10],\n",
    "                  [10,1],\n",
    "                  [10,10],[10,10]])\n",
    "costs = pd.DataFrame(costs, columns=['X1', 'X2'])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "e7a8b62b",
   "metadata": {
    "cell_id": "00006-17d04a3f-d99a-4770-8dd8-6a188182b3cb",
    "deepnote_cell_height": 74.796875,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "<!-- When the budget is 2 (corresponding to the variable &epsilon;), we don't see a change in the tree as the non-robust tree will have worst-case accuracy 11/13 and no other tree will have a better worst-case accuracy. -->\n",
    "When the budget is 2 (corresponding to the variable &epsilon;), we don't see a change in the tree from Example 1 since for this dataset, the budget is small and thus the level of robustness is small."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1a79ac9d",
   "metadata": {
    "cell_id": "00007-e8bcdb8a-f74b-45a4-acd3-a7cb8592fb0a",
    "deepnote_cell_height": 400,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 308,
    "execution_start": 1664769713072,
    "scrolled": true,
    "source_hash": "9face3f"
   },
   "outputs": [],
   "source": [
    "# Same data as Example 1\n",
    "X = np.array(\n",
    "    [\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [0, 0],\n",
    "        [1, 0],\n",
    "        [1, 0],\n",
    "        [1, 0],\n",
    "        [1, 1],\n",
    "        [0, 1],\n",
    "        [0, 1],\n",
    "    ]\n",
    ")\n",
    "X = pd.DataFrame(X, columns=[\"X1\", \"X2\"])\n",
    "\n",
    "y = np.array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1])\n",
    "\n",
    "robust_classifier = RobustOCT(\n",
    "    depth=2,\n",
    "    time_limit=60,\n",
    ")\n",
    "robust_classifier.fit(X, y, costs=costs, budget=2)\n",
    "predictions = robust_classifier.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f92977d3",
   "metadata": {
    "cell_id": "9116a32b75b94436bfeedf91c1f77815",
    "deepnote_cell_height": 362.734375,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 2,
    "execution_start": 1664769714733,
    "source_hash": "a3f1115a",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#########node  1\n",
      "Feature:  X2 , Cutoff:  0\n",
      "#########node  2\n",
      "Feature:  X1 , Cutoff:  0\n",
      "#########node  3\n",
      "Feature:  X1 , Cutoff:  0\n",
      "#########node  4\n",
      "leaf 0\n",
      "#########node  5\n",
      "leaf 1\n",
      "#########node  6\n",
      "leaf 1\n",
      "#########node  7\n",
      "leaf 0\n"
     ]
    }
   ],
   "source": [
    "robust_classifier.print_tree()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0d6acd42",
   "metadata": {
    "cell_id": "4da674ada20e4400a2a3511f53d341b0",
    "deepnote_cell_height": 534,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     406
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 983,
    "execution_start": 1664769715734,
    "source_hash": "fbc9df0d",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxoAAAGVCAYAAAB5OYd2AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABj4ElEQVR4nO3dd1xV9ePH8ddlD1mKuHcOVFLBvU3Tyj0qTUszc5SrYWrmaFla1rfScluOtLQ0V440JyoqOHDlBidDWTJk3N8fJr8IS7QLh/F+Ph49knPOved9gcPnvO8Z12Q2m82IiIiIiIhYkJXRAUREREREJP9R0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYtT0RAREREREYuzMTqAiIglhISEEBERYXQMEYvx9PSkbNmyRscQEXloKhoikueFhIRQtZo3iQnxRkcRsRgHRydOnTyhsiEieZaKhojkeRERESQmxFN58Dc4lapidByR/yz+8h+cnjmEiIgIFQ0RybNUNEQk33AqVYVC5WsZHUNERETQxeAiIiIiIpINVDRERERERMTiVDRERERERMTiVDRERERERMTiVDRERERERMTidNcpESlwrm6ex9Ut80kKDyHtdgIVen9AyScGGx1LREQkX1HREJECJWLfKs4tHI1zOR9KtB2Ila0dLo/UzZF1R5/YRfDkLpTpOoqy3UbnyDotJSp4O8em9sCpdHVqvbsJK1v7TMuc/XYU17YsoHTHkZR75h0Akm5cJfLAWm4e/o2EK6e5HXUNawdnnMs9SonWL1KkXoecfinZLv7yKUJ+nkrMid2kJMZiX6Q0RRt2pVTHEVjbORodT0Qkx6hoiEiBciNwAwDeb3yPvUcJg9PkHe41W1CizQCubp7DxRWTqdDr3Qzzbx7+jWtbFuBczocyfylRVzfP4fLaL7H3LIubdxNs3bxIigwl8sA6oo9tp0S7QVTs82FOv5xsE3vmIMEfdcWcmkyR+h2xL1yK6OM7CV31KVHHd1JzzM/3LGkiIvmRioaIFCi3b14DUMl4COV6TiDq2Dau/PoNhWu3xc27CQDJsZGcnjMcK1sHqgz+Bisb2/THuFT0pcbYlbh5N8VkMqVPj7/8B0febcfVjbMo2rgHLhXrWDxvSkIsidfPU6j8oxZ/7nsxp6Vyes4w0m7HU+21RRTxffLP6Wmcmv4SkfvXcGXDTEp3HJEjeUREjKaiISIFQsjPUwhd+Un617uf90z/d5NFEen/jr9ymstrviDq+A6SYyKwcXLDrUYzynQdhVOJyhmeM+HqGa7v+J6oY9tJirhEakIsdm5euPu0pEznN7H3LJ2+7OlZQwnbtQyA0JWfZMhS8+1VuHk3Tc949+u/SgwP4eDrvng17UnlQdMzPa/ftAPcCNzA9e1L7uxcV/LFZ9xqAJLjbnJ53XRuBK4nKTwUk40thSrUplSH4Xj4tMry99DazpEqg7/hyLtPcnrWq9T+aCc2ji6cmf86ydFhVOj9AU6lq2V4zD+dGuVUqgqeDbpwfdsiYk7stljRSEtJJurIFsL8l3MzaBOe9Ttn+H5lp+gTu0m48geu1RqnlwwAk5UV5XtOJHL/Gq5tWUCpDsMzlC4RkfxKRUNECoS7776H7VxGUkQoZbqOyrTMzSNbOPlFP8ypKXjUaYujVwWSbl4h8sA6bh7aTM23V1GofK305SMPrOPa1m9x826K6yP1MdnYEn/pJNe3L+FG4EZqvb8F+8IlASjs99Sd9e9ahmu1xul5AOw9y/7n13du0Vhi/tiHR63H8ajVBpOVNQCJEaEEf9iZpIgQXKs2wuPR1qQm3uLGoU0c/+QZKvX7lOKP9c3yegpVqE2ZLm8Q8tPHnPtuNG7eTbhxYB1u1ZtRot2gB8pssrH78/+291ny/mL+2Ee4/woi9v1CStwNsLLGvUZzPBt3/8/PnVXRx3cB4PFo60zzHLzK41C8EonXzpIYdgHHYhVyLJeIiFFUNESkQHDzboqbd1OiT+wmKSI008XYKbeiODVjIFb2Tvi8sxankv9/9CL+0kkOT2rHmbkjqf3B7+nTizZ5hpJPDM50zv3Nw79xfNpzhP4yjUdenAZAkbpPYePsStiuZbh5N7H4xeC3Lh6l9vu/4+BVLsP007NeJSkylKpD5+HZoPNfXm80wZM7c37xOAr7PoGde7Esr6t0p9e4efg3wnf/SETAL1g7uVF50IwHepc+JSGWyP1rwGTCvWbWj6r8VfyV04TvXk74np9ICr8IJhMuj9SjaKNuFKnfGTu3opnXeyuaKxtnPtB6Cvs9RaFyPvddLuHqGQAcile853zH4hXvFI1rZ1U0RKRAUNEQEQHCdv1Aanw0FftOzVAyAJxKV6NYyz5c3TiL+Esn008Psi987+s8PGq1walUVaKObsvm1P+v1FNDM5WMWxeDiTnpT5H6nTOUDAAbZzfKdHuLk/97gcj9aynx+EtZXpfJyppyz7xD8OQumJOTKNf7g/QjN1lhNps5M3ckydFhFG/9Ik6lqmT5sbejrhG+ZyXh/su5deEIAE5lalDumfF4NuqGg2eZf318Snx0htPWssLes2yWikZqQgwANo6u95xv/ef0lPjoB1q/iEhepaIhIgLEnt4P3DkyEPLzlEzzE6+dBSD+6un0omE2mwn3X07YzmXcCjlGyq0oSEtNf8zdU4NyQqFKfpmmxZy585pS46Pv+ZqSYyIBSLh6+oHWZTabCV35afrXkfvXUvyxflk+onF+yTtEBvyCS5UGVHju/Qda95F3nyIpIgQbZ3dKd3qdoo2741SqapYf71C0bIZrcnKW+c//6/oMESkYVDRERLhzwTTA9W2L/nW5tMRb6f8+v+Qdrm6cha17MTx8WmHnUQIrOwfg/68FySl2bl6ZpqX8+ZqigrcRFbztHx+b+pfXlBVXfv2a6BO7KFKvE2nJCdw8tJlrv83P0lGRu98z16qNqP7m0vTvV1Y5lfEmKSKElFtR3Aj8FSt7R6xsHTIdzTFC+hGLP49s/F1qQiwANk73PuIhIpLfqGiIiPD/O3+1P9yOc9ka913+dnQ4VzfNwam0Nz4T1mPj6JJhfvienx88hMkKAHNqaqZZ9z3d5h5HE+6+pgp9JlOy3cAHz3MPt0JPcHHFZGzdi1HpxU8xpyYTNLYZF5a9i7tPSxyLV/rHx55bOJarm+fg5t0U7ze+x9re6YHXX/31JSSGXSDcfwXh/isIWf4hIcs/xOWRung27IZnwy73LF13Zec1Go4lHgEg8erZe85PuHYOAId/+R6JiOQnKhoiIoBLJT8i968h5tTeLBWNpPCLYE7D3adlppKRdOPKnfl/9+edoMxpafd8Thtn9z8ffznTvLjzh+6b6e/unk4Vc2qvRYpGWspt/vhmMObkJCq//CW2LoUBqPTip5z6qj+nZ72Kz/h16Xe8ustsNnPu21Fc2/ot7jVbUu21Rf/pE7IdvMpTpsublOnyJnHnD90pHXtXcn7x25z/fjxu3k0p2rg7Rep2yHT0IDuv0XCr3pRLqz/j5pEtlO40MsO8xLALJF47i71nGRy8yj/Q+kVE8ioVDRERwKv5c4Su/pzQlZ9QqGIdXCr5ZphvTksj5pR/+udb2P950XHMqX2Y01LTd65TE+M4M+81zKkpmdZhW+jOjvntyMxFAu6UHYCwHd/j1eQZTNZ3/kQnRV4mdNWn93zMv3GpWAfXqg2JPLCW69uXUKxF70zL3Ao9jq1r0XveoenvQpZPJj70GMVb989wC1fP+p2IbNSdiD0/cXntVxl2ss1mM2fnv8b1bYvxeLQN1UZ8+8CnS/2bQhVqU6hCbcr3epfoYzsJ919B5IG1RB/bztlvR1G222hKdxievnx2XqPh5t0Ex5JViDm1h8jAXzN8YN+FZe8BPNC1LCIieZ2KhogIYOtSmGrDF3Dyfy9w5N12uFVvjlPpaphMJpIiLxN7Zj/JcTdpPP9OSbBzL4Znw65E7F3JoXEtcfdpSUp8DNHB2zHZ2uNczodbF49mWIdjiUew8yhB+L6VmGxssC9SGjBRtOkzOHiWwaWSL67eTYg5sZvDEx/HrXozkmPCuRG0EXefVkT+Q0H5N1VemU3wR104M3cEVzfNoVAlX2yc3Ei6cYX40OPEXzrBoxM33LdoRJ/05/KvX+NQvBLle03KNL9S36nEnNpDyMqpeNRqg3O5msCdDye8vm0xVnaOOJeryaW1X2R6rHNZH4rUfeqBX9tfmayscfe583Oo+OIn3AzaSNju5SReP/+fnvdBM1R++SuCP+rKqS/7U6R+R+yLlCb62A7izh/CpUoDSj4xOMfyiIgYTUVDRORP7jWaU3vyDi6vn0HU0a3E/LEXK2tb7DyK41a9GUXqdsyw/CMDvsDBqzwRe1dx9bf52LoUoXCdJyjbfQwnv+yX6flNVtZUG/kdF394n4h9v5CaGAdmM65VG6TfltV75CIuLJvEjQPrubp5Lo7FKlL+2Yl3isa+Xx74NdkXLkmt97ZwdfNcIvevIdz/J0hLxdbNC6dSVSjx+ACcSnv/63OkJMRyetarmKysqDLkm3teW2Hj7EblAV9y7JOn+WPWq9R6bzNWNnYkhYcAkHY7gUtr/nfP5/dq2vM/F42/srZzxLNBFzwbdMGclvl6l+zk8ogftd7bTMhPU4g6uo3UxDjsPUtTpsublOo4ItNnroiI5Gcms9lsvv9iIiK5V2BgIH5+ftR6f0uGT+4WyaviLhzm8PjWHDx4EF9f3/s/QEQkF7IyOoCIiIiIiOQ/KhoiIiIiImJxKhoiIiIiImJxKhoiIiIiImJxKhoiIiIiImJxKhoiIiIiImJxKhoiIiIiImJxKhoiIiIiImJxKhoiIiIiImJxKhoiIiIiImJxNkYHEBGxlPjLfxgdQcQi9LssIvmBioaI5Hmenp44ODpxeuYQo6OIWIyDoxOenp5GxxAReWgms9lsNjqEiMh/FRISQkREhNExsl1sbCxffvklP//8M3Xq1OGdd96hfPnyRsfKNhcuXOD999/n0KFDdOvWjeHDh+Pi4mJ0rBzh6elJ2bJljY4hIvLQVDRERPKI1atXM2TIEGJiYpg6dSqDBg3Cyir/X2qXlpbGzJkzGT16NK6ursycOZOOHTsaHUtERO4j/49QIiJ5XFhYGD179qRz587Url2bY8eOMWTIkAJRMgCsrKx45ZVXOHbsGLVq1aJTp0707NmTsLAwo6OJiMi/KBijlIhIHmQ2m1m0aBHe3t789ttvLFmyhLVr1xbY02nKli3LunXrWLx4Mb/99hve3t4sXrwYHZgXEcmdVDRERHKhixcv8tRTT/HCCy/Qrl07Tpw4wXPPPYfJZDI6mqFMJhO9e/fmxIkTtGvXjueff5727dsTEhJidDQREfkbFQ0RkVwkLS2NGTNmULNmTY4ePcqaNWv4/vvvKVq0qNHRcpWiRYvy/fffs3r1ao4cOUKNGjWYMWMGaWlpRkcTEZE/qWiIiOQSJ0+epHnz5gwdOpQ+ffpw7NgxOnToYHSsXK1jx44cO3aM3r17M3ToUFq0aMHJkyeNjiUiIqhoiIgYLjk5mcmTJ1OrVi3CwsLYtm0b33zzDW5ubkZHyxPc3NyYOXMm27Zt49q1a9SqVYvJkyeTnJxsdDQRkQJNt7cVETHQwYMHeemllwgODubNN99k4sSJODo6Gh0rz0pISGDSpElMmzaNmjVrMm/ePPz8/IyOJSJSIOmIhoiIARISEhg9ejT169fHZDIREBDAxx9/rJLxHzk6OjJlyhT27dsHQIMGDRg9ejQJCQkGJxMRKXh0RENEJIdt27aNl19+mdDQUCZOnMibb76Jra2t0bHyneTkZD755BPee+89ypYty5w5c2jRooXRsURECgwd0RARySHR0dEMHjyYVq1aUaxYMQ4dOsTYsWNVMrKJra0tb7/9NocOHcLLy4uWLVsyePBgoqOjjY4mIlIgqGiIiOSANWvWUKNGDZYsWcKMGTPYsWMH1apVMzpWgVCtWjV27NjB9OnTWbJkCTVq1GDNmjVGxxIRyfdUNEREslFYWBi9evWiU6dOPProoxw7doxXXnkFKyv9+c1JVlZWvPrqqxw7dgwfHx86derEc889R3h4uNHRRETyLY10IiLZwGw2s3jxYqpXr87mzZtZtGgR69ato2zZskZHK9DKli3L+vXrWbRoERs3bsTb25slS5agyxVFRCxPRUNExMJCQkJo3749zz//PI8//jjHjx+nT58+mEwmo6MJYDKZ6NOnDydOnODxxx+nT58+dOjQgdDQUKOjiYjkKyoaIiIWkpaWxowZM6hRowaHDx/ml19+YenSpXh5eRkdTe7By8uLpUuX8ssvv3Do0CGqV6/O119/TVpamtHRRETyBRUNERELOHXqFC1atGDo0KH07t2b48eP06lTJ6NjSRZ06tSJ48eP07t3b1599VVatGjBqVOnjI4lIpLnqWiIiPwHycnJTJ48mVq1anHt2jV+//13Zs6ciZubm9HR5AG4ubkxc+ZMfv/9d65du0atWrX46KOPSE5ONjqaiEiepQ/sExF5SIGBgfTv35+jR4/y5ptvMmnSJH2ydz4QHx/PpEmTmDZtGo8++ijz5s3D19fX6FgiInmOjmiIiDyghIQERo8eTf369TGbzezbt48pU6aoZOQTTk5OTJ06lX379pGWlkb9+vUZM2YMCQkJRkcTEclTdERDROQBbN++nZdffpmLFy8yYcIE3nrrLX2ydz6WnJzM1KlTee+99yhXrhxz586lefPmRscSEckTdERDRCQLYmJiGDJkCC1btqRo0aIcPnyYcePGqWTkc7a2towbN45Dhw5RtGhRWrRowZAhQ4iJiTE6mohIrqeiISJyH2vXrqV69eosXryYr776ip07d1KtWjWjY0kO8vb2ZufOnXz11VcsWrSIGjVqsG7dOqNjiYjkaioaIiL/IDw8nOeee46OHTvi4+NDcHAwQ4cOxcpKfzoLIisrK4YOHcqxY8eoUaMGHTp0oHfv3oSHhxsdTUQkV9JoKSLyN2azmSVLluDt7c3GjRtZuHAh69evp1y5ckZHk1ygXLly/PrrryxcuJANGzZQvXp1vv/+e3TJo4hIRioaIiJ/ERoaSocOHejTpw9t2rThxIkTPP/885hMJqOjSS5iMpl4/vnnOX78OI899hi9e/emY8eOhIaGGh1NRCTXUNEQEQHS0tL4+uuvqV69OocOHeKXX35h2bJleHl5GR1NcrFixYrxww8/sGrVKoKCgqhRowbffPMNaWlpRkcTETGcioaIFHinTp2iZcuWvPrqqzz33HMcP36cTp06GR1L8pDOnTtz7NgxevbsySuvvELLli35448/jI4lImIoFQ0RKbCSk5P5+OOPqVWrFleuXGHr1q3MmjULNzc3o6NJHuTu7s7s2bPZunUrV65c4dFHH+Xjjz8mOTnZ6GgiIoZQ0RCRAikwMJD69eszbtw4hg8fzpEjR2jVqpXRsSQfaNWqFUeOHGHYsGGMGzeOBg0aEBQUZHQsEZEcp6IhIgVKQkICY8eOpX79+qSlpbFv3z6mTp2Kk5OT0dEkH3FycuKTTz5h7969pKSkUK9ePcaOHUtCQoLR0UREcozJrPvxiUgBsWPHDgYMGMDFixeZMGECb731lj7ZW7Ld7du3mTp1Ku+//z7ly5dn7ty5NGvWzOhYIiLZTkc0RCTfi4mJ4ZVXXqFFixZ4enpy6NAhxo0bp5IhOcLOzo533nmHoKAgihQpQvPmzXn11VeJiYkxOpqISLZS0RCRfG3dunXUqFGDhQsX8uWXX7Jz5068vb2NjiUFUPXq1dm5cydffvkl3333HTVq1GD9+vVGxxIRyTYqGiKSL4WHh9O7d286dOhAjRo1OHbsGMOGDcPa2troaFKAWVtbM2zYMIKDg6levTrt27enT58+REREGB1NRMTiVDREJF8xm80sXbqU6tWr8+uvv/Ldd9/x66+/Uq5cOaOjiaQrX748GzZs4LvvvmP9+vV4e3uzdOlSdNmkiOQnuhhcRETEQNevX2fYsGEsX76cDh06sGbNGqMjiYhYhIqGiIhILrBq1SpeeeUVrly5YnQUERGLUNEQERHJJaKionB3dzc6hoiIRahoiIiIiIiIxelicBHJUStWrMBkMnH48OFM85o2bZr+QWYpKSl89NFHVK1aFXt7e0qVKsWoUaNISkpKXz4lJYXx48dTqVIlHBwc8PT0pGnTpuzatSvHXo9Idpk0aRImk4lTp07Rrl07nJ2dqVixIl988UWG5QICAmjTpg2FChXC2dmZ1q1bExAQYFBqEZH/p6IhIjmqS5culCxZktmzZ2eYfuLECXbv3s2gQYMA6NOnDx9++CEvvPAC69at46233mL27Nm88MIL6Y+ZMmUKn3/+OcOHD2fjxo0sWLCA1q1bc+PGjRx9TSLZqVu3brRt25ZffvmFjh07MnLkSDZv3gzAkSNHaNGiBdHR0Xz77bcsXLiQmJgYWrRocc8yLyKSk3TqlIjkuEmTJvH5559z5coVnJ2dARg5ciSLFy/m8uXLBAQE0Lx5cxYtWkSfPn3SH/fdd9/Rr18/jhw5go+PDx06dMDOzo6ff/7ZqJcikm0mTZrEu+++y4IFC+jXr1/6dB8fHxo2bMicOXPo0aMHW7Zs4cKFC7i5uQEQExND+fLladmypbYNETGUjmiISI4bOHAg8fHxLFu2DIDExEQWLlxI3759sbe3Z8OGDdjZ2dGtWzdSUlLS/2vbti0AO3fuBKBevXqsX7+ecePG4e/vz+3btw17TSLZ5amnnsrwdc2aNQkNDQVgx44ddOjQIb1kALi6utKpUye2b9+eozlFRP5ORUNEclzJkiXp3Lkzs2bNAmD58uXcvHkz/bSpsLAwbt++jbOzM7a2tun/lSxZEiD9U5TffvttJk2axMqVK2nSpAmenp7079+fyMhIY16YSDYoXLhwhq/t7e1JTEwE4MaNGxQvXjzTY4oXL87NmzdzJJ+IyD+xMTqAiBRMQ4YMoU2bNgQFBTFr1ixatWpFlSpVAChSpAgODg7pRy7+7m7hsLW1ZcyYMYwZM4awsDBWrVrFm2++ya1bt/jhhx9y7LWIGKVIkSJcu3Yt0/Rr165lKigiIjlNRUNEDNG6dWuqVavGG2+8we7duzMUgyeeeIIpU6YQHR1N69ats/R8Xl5eDBw4kA0bNhAcHJxdsUVylRYtWrB+/XpiY2NxcXEBIDY2ljVr1tCqVSuD04lIQaeiISKGGTx4MCNHjsTLy4uuXbumT2/ZsiW9evWiR48evP766zRo0ACACxcusH79eqZNm0alSpXo3LkztWrVwtfXFw8PDw4ePMiGDRvST8ESye8mTJjA2rVrad26NaNHj8ZkMjFlyhQSEhKYOHGi0fFEpIBT0RARwzz99NOMHDmS/v37Y2trm2He4sWL+eqrr5g/fz4ffvgh9vb2VKhQgXbt2lG0aFEAmjdvzvLly5kxYwbx8fGULVuWt956i3HjxhnxckRyXM2aNdm+fTtjx46lb9++mM1mGjVqxPbt2/Hx8TE6nogUcLq9rYgYZtasWbzyyiucOXOGChUqGB1HRERELEh3nRKRHHfq1Cl+/fVX3nvvPbp3766SIZLNPvnkE1JSUoyOISIFjI5oiEiOa9myJXv27KFJkyZ8//3397w9p4hYjrW1NXXq1GHevHnUqlXL6DgiUkDoiIaI5Ii79/0H2LZtG0lJSWzdulUlQyQH7Nmzh6SkJOrWrcs777yTYXsUEckuKhoiku127dpF7dq1sbOz47333tMneIvksPr163Pw4EHGjx/P1KlTqVOnDrt37zY6lojkcyoaIpJtYmNjGTp0KM2aNcPDw4OgoCAmTJiAnZ2d0dFEChw7OzsmTJhAUFAQ7u7uNGvWjGHDhhEbG2t0NBHJp3SNhohki19//ZVBgwYRGRnJ5MmTGTp0KNbW1kbHEhEgNTWV6dOn8/bbb+Pp6cmsWbN44oknjI4lIvmMjmiIiEVFRETw/PPP89RTT1GtWjWCg4MZMWKESoZILmJtbc2IESMIDg6mSpUqPPnkk7zwwgtERkYaHU1E8hEVDRGxCLPZzA8//ED16tVZu3YtCxYsYOPGjbp1rUguVqFCBTZt2sSCBQtYs2YN3t7e/PDDD+hkBxGxBBUNEfnPLl++TJcuXejZsyctWrTgxIkT9OvXD5PJZHQ0EbkPk8lEv379OHHiBM2bN6dnz5506dKFy5cvGx1NRPI4FQ0ReWhpaWnMnj2b6tWrExAQwE8//cTy5ct1y1qRPKh48eKsWLGCn376iYCAAKpXr87s2bNJS0szOpqI5FEqGiLyUM6cOUPr1q0ZNGgQTz/9NMePH6dbt25GxxKR/6hbt24cP36cHj16MGjQIFq3bs2ZM2eMjiUieZCKhog8kJSUFD755BN8fHy4ePEimzdvZu7cuXh4eBgdTUQsxMPDg3nz5rF582YuXryIj48Pn376KSkpKUZHE5E8REVDRLLs8OHDNGzYkDFjxvDKK69w9OhR2rRpY3QsEckmbdq04ejRowwZMoTRo0fTqFEjjhw5YnQsEckjVDRE5L6SkpIYP348devWJTExEX9/f6ZNm4azs7PR0UQkmzk7O/PZZ5/h7+9PQkICfn5+jB8/nqSkJKOjiUgupw/sE5F/tXv3bgYMGMDZs2cZN24cY8eO1Sd7ixRQt2/f5qOPPuLDDz/kkUceYe7cuTRu3NjoWCKSS+mIhojcU1xcHMOHD6dZs2a4ubkRFBTExIkTVTJECjA7OzsmTpxIUFAQrq6uNG3alOHDhxMXF2d0NBHJhVQ0RCSTDRs2UKNGDebNm8dnn33G7t27qVGjhtGxRCSXqFGjBrt37+azzz5j3rx51KxZk40bNxodS0RyGRUNEUkXGRlJ3759efLJJ6lSpQrBwcGMHDkSa2tro6OJSC5jbW3NyJEjCQ4OpnLlyjzxxBP07duXyMhIo6OJSC6hoiEimM1mfvzxR6pXr87q1auZP38+mzZtokKFCkZHE5FcrkKFCmzatIn58+ezevVqqlevzvLly9EloCKioiFSwF25coWuXbvy7LPP0qxZM44fP86LL76IyWQyOpqI5BEmk4kXX3yR48eP07RpU5555hm6du3KlStXjI4mIgZS0RApoMxmM3PmzKF69ers3buXFStWsGLFCkqUKGF0NBHJo0qUKMFPP/3EihUr2Lt3L9WrV2fu3Lk6uiFSQKloiBRAZ86coXXr1gwcOJDu3btz4sQJunfvbnQsEckn7v5d6datGy+//DKtW7fm7NmzRscSkRymoiFSgKSkpDBt2jQeffRRzp8/z+bNm5k3bx4eHh5GRxORfMbDwyP9eq/z58/j4+PDtGnTSElJMTqaiOQQFQ2RAuLIkSM0atSIUaNGMWjQIIKDg2nTpo3RsUQkn3v88ccJDg5m0KBBjBo1isaNG3P06FGjY4lIDlDREMnnkpKSmDBhAn5+fsTHx+Pv78/nn3+Os7Oz0dFEpIBwdnbm888/x9/fn1u3buHr68uECRNISkoyOpqIZCOTWVdoieRb/v7+DBgwgDNnzvD2228zduxY7O3tjY4lIgVYUlISH330EZMnT+aRRx5h3rx5NGrUyOhYIpINdERDJB+Ki4tjxIgRNG3aFBcXFwIDA5k0aZJKhogYzt7enkmTJhEYGIiLiwtNmjRh5MiRxMXFGR1NRCxMRzRE8plNmzYxcOBAwsPD+fDDDxk2bJg+2VtEcqXU1FS+/PJLxo0bh5eXF7Nnz6Zt27ZGxxIRC9ERDZF84saNG/Tr14927drxyCOPcPToUUaOHKmSISK5lrW1Na+99hrBwcFUqlSJdu3a8eKLL3Ljxg2jo4mIBahoiOQBKSkpXLt27Z7zzGYzy5cvx9vbm19++YX58+ezefNmKlasmMMpRUQeTsWKFfntt9+YN28eK1eupHr16qxYseIfP+jv2rVruk2uSB6goiGSBwwaNIj27dtnmn7lyhW6devGM888Q9OmTTl+/DgvvvgiJpPJgJQiIg/PZDLRv39/jh8/TuPGjXn66afp3r07V69ezbRs+/btGTRokAEpReRBqGiI5HL79u1j/vz5vPzyy+nTzGYzc+fOpXr16uzZs4cVK1bw008/UaJECQOTioj8dyVLluTnn39mxYoV+Pv74+3tzbx58zIc3RgwYADz588nICDAwKQicj+6GFwkF0tLS6Nhw4akpKSwf/9+rK2tOXv2LAMHDmTr1q28+OKLfPrppxQuXNjoqCIiFnfjxg3eeOMNvv32Wx577DHmzJlDxYoVSU1NpW7dutja2rJ3716srPS+qUhupC1TJBdbsGAB+/fv56uvvgJg2rRp+Pj4cO7cOTZt2sT8+fNVMkQk3ypcuDALFixg48aNnDt3jpo1a/LZZ58B8NVXX7F//36+/fZbY0OKyD9S0RDJpaKiohg7dix9+vTB1dWVRo0aMWrUKAYNGsTRo0d5/PHHjY4oIpIj2rZty9GjRxk4cCBvvvkmjRs3xt3dnd69ezNmzBiioqKMjigi96CiIZJLTZw4kYSEBIoWLYqvry+3bt3C39+fzz//nEKFChkdT0QkRxUqVIj//e9/7N69m7i4OHx9ffHy8iIhIYFJkyYZHU9E7kHXaIjkQsHBwdSuXZsiRYpw8+ZNxo4dy4ABAwgLC+PSpUuEhoYSHx/P0KFDcXJyMjquiEi2iY+PZ/r06Tg5OVGmTBlKly6Nl5cXc+bM4aOPPqJw4cJERkZy6NAhatasaXRcEfkLFQ2RXKhixYqcP38eZ2dnPDw8CAsL4/bt2+nzbW1tqVKlCr/99hvFixc3MKmISPa6du0abdq04Y8//iA5OTl9up2dHV5eXty8eZNbt25RoUIFzp07Z2BSEfk7FQ2RXMZsNlOuXDlsbW2pX78+ZcuWpXTp0unv5JUpU4aiRYvqLisiUqCkpaURHh5OaGho+pHdS5cuERISQkBAAMnJyVy8eFGfIySSi6hoiIiIiIiIxdkYHUAeXEhICBEREUbHELEYT09PypYta3QMkXxH44XkNxov8hYVjTwmJCSEqtW8SUyINzqKiMU4ODpx6uQJDR4iFqTxQvIjjRd5i4pGHhMREUFiQjyVB3+DU6kqRscR+c/iL//B6ZlDiIiI0MAhYkEaLyS/0XiR96ho5FFOpapQqHwto2OIiEgup/FCRIyi29aIiIiIiIjFqWiIiIiIiIjFqWiIiIiIiIjFqWiIiIiIiIjFqWiIiIiIiIjF6a5T+dzVzfO4umU+SeEhpN1OoELvDyj5xGCjY4mISC6j8UJELE1FIx+L2LeKcwtH41zOhxJtB2Jla4fLI3VzZN3RJ3YRPLkLZbqOomy30TmyTkuJCt7Osak9cCpdnVrvbsLK1j7TMme/HcW1LQso3XEk5Z55J3369W2LiT0XyK2LwcRfOkHa7QRKd3qdck+/nZMvIcfEXz5FyM9TiTmxm5TEWOyLlKZow66U6jgCaztHo+OJSBZpvHg4Gi+yTuNFwaSikY/dCNwAgPcb32PvUcLgNHmHe80WlGgzgKub53BxxWQq9Ho3w/ybh3/j2pYFOJfzoczfBsXzSyeQGh+DjbM7du7FSQw7n5PRc1TsmYMEf9QVc2oyRep3xL5wKaKP7yR01adEHd9JzTE/33PQFZHcR+PFw9F4kTUaLwouFY187PbNawAaNB5CuZ4TiDq2jSu/fkPh2m1x824CQHJsJKfnDMfK1oEqg7/BysY2w+OqvjoHx5JVcPAsw/UdSzkzZ1iO5E1JiCXx+nkKlX80R9ZnTkvl9JxhpN2Op9priyji++Sf09M4Nf0lIvev4cqGmZTuOCJH8ojIf6Px4uFpvPh3Gi8KNhWNfCjk5ymErvwk/evdz3um/7vJooj0f8dfOc3lNV8QdXwHyTER2Di54VajGWW6jsKpROUMz5lw9QzXd3xP1LHtJEVcIjUhFjs3L9x9WlKm85vYe5ZOX/b0rKGE7VoGQOjKTzJkqfn2Kty8m6ZnvPv1XyWGh3DwdV+8mvak8qDpmZ7Xb9oBbgRu4Pr2JXf+WFbyxWfcagCS425yed10bgSuJyk8FJONLYUq1KZUh+F4+LTK8vfQ2s6RKoO/4ci7T3J61qvU/mgnNo4unJn/OsnRYVTo/QFOpatlepzHo62zvI7/Ki0lmagjWwjzX87NoE141u+c4fuVnaJP7Cbhyh+4VmucPmgAmKysKN9zIpH713BtywJKdRiOyWTKkUwi8uA0Xmi8yG4aLwo2FY186O67KWE7l5EUEUqZrqMyLXPzyBZOftEPc2oKHnXa4uhVgaSbV4g8sI6bhzZT8+1VFCpfK335yAPruLb1W9y8m+L6SH1MNrbEXzrJ9e1LuBG4kVrvb8G+cEkACvs9dWf9u5bhWq1xeh4Ae8+y//n1nVs0lpg/9uFR63E8arXBZGUNQGJEKMEfdiYpIgTXqo3weLQ1qYm3uHFoE8c/eYZK/T6l+GN9s7yeQhVqU6bLG4T89DHnvhuNm3cTbhxYh1v1ZpRoN+g/v46HFfPHPsL9VxCx7xdS4m6AlTXuNZrj2bh7jmWIPr4LuPdA6eBVHofilUi8dpbEsAs4FquQY7lE5MFovNB4kd00XhRsKhr5kJt3U9y8mxJ9YjdJEaGZLq5LuRXFqRkDsbJ3wuedtTiV/P93o+IvneTwpHacmTuS2h/8nj69aJNnKPnE4EznUN48/BvHpz1H6C/TeOTFaQAUqfsUNs6uhO1ahpt3E4tf3Hfr4lFqv/87Dl7lMkw/PetVkiJDqTp0Hp4NOv/l9UYTPLkz5xePo7DvE9i5F8vyukp3eo2bh38jfPePRAT8grWTG5UHzcjxd13ir5wmfPdywvf8RFL4RTCZcHmkHkUbdaNI/c7YuRXN9JiUW9Fc2TjzgdZT2O8pCpXzue9yCVfPAOBQvOI95zsWr3hn4Lh2VgOHSC6m8ULjBWi8kOyjolEAhe36gdT4aCr2nZph0ABwKl2NYi37cHXjLOIvnUw/3Gtf+N7n7XrUaoNTqapEHd2Wzan/X6mnhmYaNG5dDCbmpD9F6nfOMGgA2Di7UabbW5z83wtE7l9LicdfyvK6TFbWlHvmHYInd8GcnES53h+kvxOX3W5HXSN8z0rC/Zdz68IRAJzK1KDcM+PxbNQNB88y//r4lPjoDKchZIW9Z9ksDRypCTEA2Di63nO+9Z/TU+KjH2j9IpK7aLzQePFPNF5IVqhoFECxp/cDd97pCfl5Sqb5idfOAhB/9XT6wGE2mwn3X07YzmXcCjlGyq0oSEtNf4zJxi77g/+pUCW/TNNiztx5Tanx0fd8TckxkQAkXD39QOsym82Ervw0/evI/Wsp/li/HHmH6si7T5EUEYKNszulO71O0cbdcSpVNcuPdyhaNsM51jnL/Of/db6tSF6m8SLrNF48LI0X+ZmKRgGUHHcTgOvbFv3rcmmJt9L/fX7JO1zdOAtb92J4+LTCzqMEVnYOwP+f25tT7Ny8Mk1L+fM1RQVvIyp42z8+NvUvrykrrvz6NdEndlGkXifSkhO4eWgz136b/0Dvcj0spzLeJEWEkHIrihuBv2Jl74iVrUOmd+eMkP4O1J/vVP1dakIsADZO934HS0TyBo0XWafx4t40XhRsKhoF0N2NufaH23EuW+O+y9+ODufqpjk4lfbGZ8J6bBxdMswP3/Pzg4cwWQFgTk3NNOu+h0/v8e7Q3ddUoc9kSrYb+OB57uFW6AkurpiMrXsxKr34KebUZILGNuPCsndx92mJY/FKFlnPP6n++hISwy4Q7r+CcP8VhCz/kJDlH+LySF08G3bDs2GXew6id2XnObeOJR4BIPHq2XvOT7h2DgCHbP4eiUj20niRNRov/pnGi4JNRaMAcqnkR+T+NcSc2pulgSMp/CKY03D3aZlp0Ei6ceXO/L/7884e5rS0ez6njbP7n4+/nGle3PlD9830d3cPj8ec2muRgSMt5TZ/fDMYc3ISlV/+EluXwgBUevFTTn3Vn9OzXsVn/Lr0O5hkFwev8pTp8iZlurxJ3PlDdwaRvSs5v/htzn8/HjfvphRt3J0idTtkejcoO8+5davelEurP+PmkS2U7jQyw7zEsAskXjuLvWcZHLzKP9D6RSR30Xhxfxov/p3Gi4JNRaMA8mr+HKGrPyd05ScUqlgHl0q+Geab09KIOeWffr9y+z8vIos5tQ9zWmr6H8vUxDjOzHsNc2pKpnXYFrrzh/Z2ZOaBAe4MXgBhO77Hq8kzmKzv/ComRV4mdNWn93zMv3GpWAfXqg2JPLCW69uXUKxF70zL3Ao9jq1r0XvecePvQpZPJj70GMVb989wSz7P+p2IbNSdiD0/cXntV5n+aGanQhVqU6hCbcr3epfoYzsJ919B5IG1RB/bztlvR1G222hKdxievnx2nnPr5t0Ex5JViDm1h8jAXzN8ANOFZe8B5Ni5ySKSfTReaLz4rzReFGwqGgWQrUthqg1fwMn/vcCRd9vhVr05TqWrYTKZSIq8TOyZ/STH3aTx/Dt/9O3ci+HZsCsRe1dyaFxL3H1akhIfQ3Twdky29jiX8+HWxaMZ1uFY4hHsPEoQvm8lJhsb7IuUBkwUbfoMDp5lcKnki6t3E2JO7ObwxMdxq96M5JhwbgRtxN2nFZH/MOD8myqvzCb4oy6cmTuCq5vmUKiSLzZObiTduEJ86HHiL53g0Ykb7jtwRJ/05/KvX+NQvBLle03KNL9S36nEnNpDyMqpeNRqg3O5munzrm1bROypfQAkhJ0H4EbQRm7fuHLn+1Ky8n/+9FOTlTXuPnd+DhVf/ISbQRsJ272cxOvn/9PzPmiGyi9/RfBHXTn1ZX+K1O+IfZHSRB/bQdz5Q7hUaUDJJwbnWB4RyR4aLzRe/FcaLwo2FY0Cyr1Gc2pP3sHl9TOIOrqVmD/2YmVti51HcdyqN6NI3Y4Zln9kwBc4eJUnYu8qrv42H1uXIhSu8wRlu4/h5Jf9Mj2/ycqaaiO/4+IP7xOx7xdSE+PAbMa1aoP02+x5j1zEhWWTuHFgPVc3z8WxWEXKPzvxzsCx75cHfk32hUtS670tXN08l8j9awj3/wnSUrF188KpVBVKPD4Ap9Le//ocKQmxnJ71KiYrK6oM+QZre6dMy9g4u1F5wJcc++Rp/pj1KrXe24zVn3dRiT21L/1Tbu+KDz1GfOgxAFyrNf7PA8dfWds54tmgC54NumBOy3z+cnZyecSPWu9tJuSnKUQd3UZqYhz2nqUp0+VNSnUckeke+iKSN2m8uDeNF1mn8aLgMpnNZvP9F5PcIjAwED8/P2q9vyXDJ7GK5FVxFw5zeHxrDh48iK+v7/0fICJZovFC8huNF3mPldEBREREREQk/1HREBERERERi1PREBERERERi1PREBERERERi1PREBERERERi1PREBERERERi1PREBERERERi1PREBERERERi1PREBERERERi1PREBERERERi7MxOoA8nPjLfxgdQcQi9Lsskr20jUl+od/lvEdFI4/x9PTEwdGJ0zOHGB1FxGIcHJ3w9PQ0OoZIvqLxQvIjjRd5i8lsNpuNDiEPJiQkhIiICKNj5Hpbt25l1KhRvPbaa/Tp0ydH1nnz5k169+6Nl5cXc+bMwdbWNkfWm9d5enpStmxZo2OI5DsaL7ImOTmZAQMGEBERweLFi/Hw8MiR9S5evJjPP/+cTz/9lFatWuXIOvM6jRd5i4qG5EunT5+mbt26PP744yxfvhyTyZRj6963bx/NmjVjyJAhfPHFFzm2XhEReTjDhw9n5syZ7Nq1i/r16+fYes1mM08//TSbN2/m4MGDPPLIIzm2bpGcoKIh+U58fDwNGzYkKSmJ/fv34+rqmuMZvv76a1599VWWLl1Kz549c3z9IiKSNUuXLuW5557j66+/ZsiQnD/NLCYmhrp16+Lo6MiePXtwcnLK8Qwi2UVFQ/IVs9lMv379WLFiBfv27aNmzZqG5Xj++edZtWoVAQEBVK9e3ZAcIiLyz44dO0b9+vXp1q0bCxcuzNGj338VHBxMgwYN6NGjB99++61hOUQsTUVD8pXZs2czaNAgFi9eTO/evQ3NcuvWLRo0aEBqaioBAQG4uLgYmkdERP5fbGws9erVw8bGhn379uHs7GxoniVLltCnTx9mzZrFwIEDDc0iYikqGpJvHDhwgCZNmjBgwABmzJhhdBwATp06Rd26dWnfvj1Lly7Vu1QiIrmA2WymZ8+e/Prrr+zfv5+qVasaHQmAV155hXnz5rF7927q1q1rdByR/0xFQ/KFyMhI/Pz8KFasGDt27MDe3t7oSOlWrFjB008/zRdffMHw4cONjiMiUuB98cUXjBw5khUrVtC9e3ej46RLSkqiWbNmhIWFERgYSOHChY2OJPKfqGhInpeWlkaHDh0ICAggMDAwV9727o033uDLL79k+/btNG7c2Og4IiIF1u7du2nZsiUjRozg008/NTpOJiEhIfj6+lK/fn3Wrl2LlZWV0ZFEHpqKhuR577//PhMnTmTDhg20bdvW6Dj3lJyczGOPPca5c+cICgrCy8vL6EgiIgVOWFgYderUoWLFimzdujXXftbRxo0befLJJ3n33XcZP3680XFEHppqsuRpmzZtYuLEiUyaNCnXlgwAW1tbfvjhB1JSUujVqxepqalGRxIRKVBSUlLo2bMnqamp/PDDD7m2ZAC0a9eOiRMnMnHiRDZv3mx0HJGHpiMakmflxcPL27Zto3Xr1owZM4YPP/zQ6DgiIgXG22+/zdSpU9myZQstWrQwOs59paWl0b59e/bv359rTwsWuR8VDcmTkpKSaN68OdevX+fgwYMUKVLE6EhZNnXqVEaPHs3q1avp2LGj0XFERPK91atX07lzZ6ZOncqoUaOMjpNlkZGR+Pr6Urx48Vx3oxORrFDRkDxp6NChzJkzJ0/eAtBsNtO1a1e2bdtGYGAgFStWNDqSiEi+dfbsWfz8/GjVqhU///xznrvN+P79+2natCkvv/wy06dPNzqOyANR0ZA85+6HGs2cOZNBgwYZHeehREVFUbduXVxdXdm9ezeOjo5GRxIRyXcSEhJo3LgxcXFxHDhwADc3N6MjPZSZM2cyZMgQlixZwnPPPWd0HJEsU9GQPCU4OJgGDRrQo0cPvv322zz3ztRfHT58mIYNG9K7d2/mzp1rdBwRkXznpZdeYunSpezdu5dHH33U6DgPzWw207dvX3766ScCAgKoUaOG0ZFEskRFQ/KMmJgY6tWrh729PXv37sXJycnoSP/Zt99+y4svvsjcuXN56aWXjI4jIpJvzJs3jwEDBvDdd9/xwgsvGB3nP4uPj6dhw4YkJSWxf/9+XF1djY4kcl8qGpInmM1mnnnmGTZt2sSBAweoXLmy0ZEsZuDAgSxcuJA9e/ZQp04do+OIiOR5gYGBNG7cmL59+zJr1iyj41jM6dOnqVu3Lm3btuXHH3/M00f1pWBQ0ZA84fPPP+f111/n559/pmvXrkbHsajExESaNGlCVFQUBw4cwMPDw+hIIiJ51s2bN/Hz86Nw4cLs2rULBwcHoyNZ1M8//0z37t35/PPPGTlypNFxRP5V7v/gASnwdu7cyahRoxg1alS+KxkADg4OrFixgps3b9K3b1/S0tKMjiQikielpaXxwgsvEBUVxYoVK/JdyQDo1q0bb775JqNGjWLXrl1GxxH5VzqiIbnatWvX8PX1pXLlymzZsgUbGxujI2WbdevW0aFDByZPnszYsWONjiMikudMnjyZd955h3Xr1vHkk08aHSfbpKSk0Lp1a06fPk1QUBDFihUzOpLIPaloSK6VkpLC448/zsmTJwkKCqJ48eJGR8p248ePZ/LkyWzatInWrVsbHUdEJM/47bffaNeuHePGjeO9994zOk62u3r1Kr6+vlSrVo3Nmzfn6zfiJO9S0ZBca8yYMXz66ads3bqV5s2bGx0nR6SmpvLEE09w+PBhgoKCKFWqlNGRRERyvUuXLlGnTh3q1KnDr7/+irW1tdGRcsSOHTt47LHHePPNN/n444+NjiOSiYqG5EqrVq2ia9eufPrpp7zxxhtGx8lR4eHh+Pr6UqZMGbZt24adnZ3RkUREcq3bt2/TsmVLLl26RGBgIJ6enkZHylGffvopo0aNYtWqVXTu3NnoOCIZqGhIrnPmzBn8/Pxo06YNK1asKJC379u7dy/NmzfnlVde4X//+5/RcUREcq0RI0bwzTffsHPnTho0aGB0nBxnNpvp0aMHW7Zs4cCBAzzyyCNGRxJJp6IhuUp8fDyNGjUiISGBAwcOFOgPJJo+fTrDhg1j2bJlPPvss0bHERHJdZYtW0avXr2YPn06r776qtFxDBMdHU29evVwdHRkz549+eIDbSV/UNGQXMNsNvPiiy/y448/sm/fPnx8fIyOZCiz2Uzv3r1Zs2YNAQEBeHt7Gx1JRCTXOH78OPXr16dz584sXry4QB79/qujR4/SoEEDnn32WebPn1/gvx+SO6hoSK4xZ84cBg4cyKJFi+jTp4/RcXKFuLg4GjRogNlsJiAggEKFChkdSUTEcLGxsdSvXx9ra2v27duHs7Oz0ZFyhUWLFvHCCy8wZ84cBgwYYHQcERUNyR0OHjxI48aNeemll/j666+NjpOrnDx5knr16tGhQwe+//57vUslIgWa2WymV69erFu3jgMHDlC1alWjI+UqQ4YMYcGCBezevRs/Pz+j40gBp6Ihhrtx4wZ+fn4ULVqUnTt3Ym9vb3SkXOfHH3/k2Wef5csvv2TYsGFGxxERMcyXX37JiBEjWL58OT169DA6Tq6TlJRE06ZNiYiI4ODBgxQuXNjoSFKAqWiIodLS0ujYsSN79+4lMDCQcuXKGR0p13rttdeYMWMG27dvp1GjRkbHERHJcf7+/rRo0YJhw4bx2WefGR0n17p48SK+vr40bNiQNWvWYGVlZXQkKaBUNMRQH3zwARMmTGD9+vU88cQTRsfJ1ZKTk2nVqhUXLlwgKCiIokWLGh1JRCTHhIWF4evrS/ny5fn999+xtbU1OlKutmHDBp566inef/99xo0bZ3QcKaBUccUwmzdvZsKECUycOFElIwtsbW354YcfSE5OplevXqSmphodSUQkR6SmptKrVy+Sk5P58ccfVTKy4IknnmDChAmMHz+ezZs3Gx1HCigd0RBDhIaG4uvri5+fH+vXr9dh3QewdetWHn/8ccaOHcsHH3xgdBwRkWw3btw4Pv74Y7Zs2ULLli2NjpNnpKam0r59ew4ePEhgYCBlypQxOpIUMCoakuNu375N8+bNuXr1KgcPHsTT09PoSHnOxx9/zNixY1m7di3t27c3Oo6ISLZZs2YNnTp14uOPP2b06NFGx8lzIiIi8PX1pWTJkuzYsQM7OzujI0kBoqIhOW7YsGHMnj2bXbt2Ua9ePaPj5ElpaWl07dqVHTt2EBgYSIUKFYyOJCJicefOncPPz48WLVqwcuVK3d77IQUEBNC0aVMGDRrEV199ZXQcKUBUNCRHff/99/Tu3ZtvvvmGwYMHGx0nT4uKisLPzw83Nzf8/f1xcHAwOpKIiMUkJCTQpEkTYmJiOHDgAO7u7kZHytO++eYbXnnlFb7//nt69epldBwpIFQ0JMccP36cevXq0a1bNxYuXKh3pizg0KFDNGrUiD59+jBnzhyj44iIWMyAAQNYsmQJe/fupVatWkbHyfPMZjPPP/88K1euJCAggBo1ahgdSQoAFQ0REREREbE43epHREREREQsTkVDREREREQsTkVDREREREQsTkVD/tWKFSswmUwcPnw407ymTZvSrFkzAFJSUvjoo4+oWrUq9vb2lCpVilGjRpGUlJS+fEpKCuPHj6dSpUo4ODjg6elJ06ZN2bVrV469nvxm0qRJmEwmTp06Rbt27XB2dqZixYp88cUXGZYLCAigTZs2FCpUCGdnZ1q3bk1AQIBBqUUkv9KYkbtpzJCcpqIh/6pLly6ULFmS2bNnZ5h+4sQJdu/ezaBBgwDo06cPH374IS+88ALr1q3jrbfeYvbs2bzwwgvpj5kyZQqff/45w4cPZ+PGjSxYsIDWrVtz48aNHH1N+VG3bt1o27Ytv/zyCx07dmTkyJFs3rwZgCNHjtCiRQuio6P59ttvWbhwITExMbRo0eKeOwMiIg9LY0beoDFDcoxZ5D4mTpxodnV1NcfFxaVPGzFihLlIkSLmxMRE844dO8yAedGiRRke9+2335oB85EjR8xms9ncvn17c9euXXM0e343ceJEM2BesGBBhuk1a9Y0DxgwwGw2m83du3c3u7u7m6OiotLnR0dHmz08PPTzEBGL05iRe2nMkJymIxpyXwMHDiQ+Pp5ly5YBkJiYyMKFC+nbty/29vZs2LABOzs7unXrRkpKSvp/bdu2BWDnzp0A1KtXj/Xr1zNu3Dj8/f25ffu2Ya8pv3nqqacyfF2zZk1CQ0MB2LFjBx06dMDNzS19vqurK506dWL79u05mlNE8j+NGbmfxgzJKSoacl8lS5akc+fOzJo1C4Dly5dz8+bN9EPgYWFh3L59G2dnZ2xtbdP/K1myJAAREREAvP3220yaNImVK1fSpEkTPD096d+/P5GRkca8sHykcOHCGb62t7cnMTERgBs3blC8ePFMjylevDg3b97MkXwiUnBozMj9NGZITrExOoDkDUOGDKFNmzYEBQUxa9YsWrVqRZUqVQAoUqQIDg4O6e9C/d3dwcPW1pYxY8YwZswYwsLCWLVqFW+++Sa3bt3ihx9+yLHXUtAUKVKEa9euZZp+7dq1TIONiIglaMzIuzRmiCWpaEiWtG7dmmrVqvHGG2+we/fuDH/kn3jiCaZMmUJ0dDStW7fO0vN5eXkxcOBANmzYQHBwcHbFFqBFixasX7+e2NhYXFxcAIiNjWXNmjW0atXK4HQikh9pzMi7NGaIJaloSJYNHjyYkSNH4uXlRdeuXdOnt2zZkl69etGjRw9ef/11GjRoAMCFCxdYv34906ZNo1KlSnTu3JlatWrh6+uLh4cHBw8eZMOGDemH0yV7TJgwgbVr19K6dWtGjx6NyWRiypQpJCQkMHHiRKPjiUg+pTEjb9KYIZakoiFZ9vTTTzNy5Ej69++Pra1thnmLFy/mq6++Yv78+Xz44YfY29tToUIF2rVrR9GiRQFo3rw5y5cvZ8aMGcTHx1O2bFneeustxo0bZ8TLKTBq1qzJ9u3bGTt2LH379sVsNtOoUSO2b9+Oj4+P0fFEJJ/SmJE3acwQSzKZzWaz0SEkb5g1axavvPIKZ86coUKFCkbHERGRXExjhojoiIbc16lTpzh37hzvvfce3bt314AhIiL/SGOGiNylIxpyXy1btmTPnj00adKE77///p63vRMREQGNGSLy/1Q0RERERETE4vSBffLALl26RNGiRWnXrh2pqalGx5GHsGXLFqytrZkwYYLRUUQknxs/fjzW1tZs3brV6CjyEFJTU2nbti1eXl5cunTJ6DiSx+iIhjyQ27dv06JFCy5fvkxgYCCenp5GR5KHNHnyZMaNG8fatWtp37690XFEJB9at24dHTp0YPLkyYwdO9boOPKQwsPD8fX1pUyZMmzbtg07OzujI0keoaIhD2TEiBF888037Ny5M/3e55I3paWl0blzZ3bv3k1gYCDly5c3OpKI5CPnz5/H19eXZs2asWrVKqysdBJFXrZ3716aN2/OkCFD+OKLL4yOI3mEioZk2bJly+jVqxfTp0/n1VdfNTqOWMDNmzfx8/OjcOHC7Nq1CwcHB6MjiUg+kJiYSJMmTYiKiuLAgQN4eHgYHUksYMaMGQwdOpSlS5fSs2dPo+NIHqCiIVly/Phx6tevT+fOnVm8eDEmk8noSGIhgYGBNG7cmL59+zJr1iyj44hIPjBw4EAWLlzInj17qFOnjtFxxELMZjO9e/dm9erV7N+/H29vb6MjSS6noiH3FRsbS/369bG2tmbfvn04OzsbHUksbN68eQwYMIAFCxbQr18/o+OISB62YMEC+vfvz7x58+jfv7/RccTC4uLiaNCgAWlpaQQEBODi4mJ0JMnFVDTkX5nNZnr16sW6des4cOAAVatWNTqSZJOXXnqJ77//nr1791KrVi2j44hIHnTo0CEaNWpE7969mTt3rtFxJJucPHmSevXq0b59e5YuXaqzHOQfqWjIv/ryyy8ZMWIEy5cvp0ePHkbHkWyUkJBA48aNiY2N5cCBA7i7uxsdSUTykKioKPz8/HB1dcXf3x9HR0ejI0k2Wr58Oc888wxffPEFw4cPNzqO5FIqGvKP/P39adGiBcOGDeOzzz4zOo7kgLNnz+Ln50fLli1ZuXKl3qUSkSxJS0uja9eu7Nixg4MHD1KxYkWjI0kOeO2115g+fTo7duygUaNGRseRXEhFQ+4pLCyMOnXqUKFCBX7//XdsbW2NjiQ5ZPXq1XTu3JkpU6bw1ltvGR1HRPKAKVOmMGbMGFavXk3Hjh2NjiM5JDk5mVatWnHhwgUCAwPx8vIyOpLkMioaksndTwENDg4mKCiIkiVLGh1JctjYsWOZOnUqW7ZsoWXLlkbHEZFc7Pfff6dNmzaMGTOGDz/80Og4ksMuX76Mr68vPj4+bNy4EWtra6MjSS6ioiGZjBs3jo8//lg7mQVYSkoKbdu25fjx4wQGBqpsisg9XblyhTp16lCzZk02bdqkncwC6m7ZHDt2LB988IHRcSQXUdGQDNasWUOnTp34+OOPGT16tNFxxEDXr1/H19eXihUrsnXrVp0+JyIZ3D1t5vz58wQFBem0mQLu448/ZuzYsaxZs4YOHToYHUdyCRUNSXfu3Dl8fX11IbCk2717Ny1btmT48OFMmzbN6Dgikou8/vrrfPXVV2zfvp3GjRsbHUcMphsCyL2oaAhw59amTZo0ISYmRrc2lQz+97//8dprr+kWxyKSTrc2lXu5e4tjNzc3/P39cXBwMDqSGExFQwAYMGAAS5YsYc+ePdSuXdvoOJKLmM1mnn32WTZs2MD+/fv1oY0iBdypU6eoW7cuTz31FMuWLdPRb8ng7oc29unThzlz5hgdRwymoiHMmzePAQMGsGDBAvr162d0HMmFYmNjqVevHjY2Nuzbtw9nZ2ejI4mIAeLi4mjQoAFpaWkEBATg4uJidCTJhRYsWED//v2ZN28e/fv3NzqOGEhFo4ALCgqiUaNGvPDCC8yePdvoOJKLHT9+nPr169O5c2cWL16sdzFFChiz2Uzv3r1ZvXo1AQEBVK9e3ehIkou9/PLLLF68GH9/f+rUqWN0HDGIikYBdvPmTerWrYu7uzu7d+/WuZRyX0uXLuW5555jxowZvPLKK0bHEZEcNGPGDIYOHcrSpUvp2bOn0XEkl0tMTKRx48ZER0dz8OBBXftZQKloFFBpaWl06dKFnTt3EhgYSIUKFYyOJHnEsGHDmDVrFrt27aJ+/fpGxxGRHLBv3z6aNWvG4MGD+fLLL42OI3nEuXPn8PPzo1mzZqxatQorKyujI0kOU9EooD766CPefvtt1q5dS/v27Y2OI3nI7du3ad68OVeuXCEwMBBPT0+jI4lINgoPD8fX15fSpUuzfft27OzsjI4kecjatWvp2LEjH330EWPGjDE6juQwVcsCaMuWLbzzzju88847KhnywOzs7Fi+fDkJCQn07t2b1NRUoyOJSDZJTU2ld+/eJCYmsnz5cpUMeWAdOnRg3LhxjBs3jq1btxodR3KYjmgUMJcvX6ZOnTrUqlWLDRs2YG1tbXQkyaM2b95Mu3btGD9+PO+++67RcUQkG0yYMIEPPviATZs20aZNG6PjSB6VmppKu3btOHLkCEFBQZQqVcroSJJDVDQKkNu3b9OyZUtCQ0MJDAykaNGiRkeSPO6DDz5gwoQJrFu3jieffNLoOCJiQevXr6d9+/Z88MEHjBs3zug4kseFhYXh6+tLuXLl2LZtG7a2tkZHkhygopFPmc3mTLcfHTlyJF9//TU7duygYcOGBiWT/CQtLY2OHTuyd+9eDh48SPny5TPMv9fvoYjkLvfaTi9cuICvry+NGzdm9erVuohXLGLPnj00b96coUOH8vnnn2eYp/Eif9Jfjnxoz549lCxZkuTk5PRpP/zwA1988QXTpk1TyRCLsbKyYtGiRbi6utKjRw8SExPT502bNo0uXboYF05EsqRLly5MmzYt/evExER69OiBm5sbixYtUskQi2nUqBHTpk3jf//7Hz/++GP69OTkZEqWLMnevXsNTCfZQX898qHNmzdz+/ZtbGxsADhx4gQvvfQSPXv2ZOjQoQank/ymcOHCrFixgqNHjzJy5Mj06VZWVmzevJmUlBTjwonIv0pJSWHTpk0ZrtcbMWIEwcHBrFixAg8PDwPTSX40bNgwnn32WV566SVOnjwJgI2NDUlJSWzevNngdGJpKhr5UGBgIL6+vphMJuLi4ujevTtly5Zlzpw5Oiwp2cLPz4/p06cza9YsFi5cCICvry8JCQnpA4mI5D4nTpwgMTERX19fAL777jtmz57N9OnT8fPzMzid5Ecmk4m5c+dSpkwZunfvTlxcHCaTCV9fXwIDA42OJxamopEPBQYG4ufnh9ls5uWXXyY0NJSff/6ZQoUKGR1N8rEBAwbQr18/Bg8ezJEjR6hTpw6ABg6RXOzu9lmnTh0OHz7M4MGDefHFF3nppZcMTib5WaFChfjpp5+4ePEiAwcOxGw24+fnp/EiH1LRyGfCw8MJDQ3F19eX6dOns2zZMubNm0e1atUAiImJIS0tzeCUkp/ExcWRnJyMyWRixowZVK5cme7du2M2m6lcubIGDpFcLDAwkCpVqpCamkr37t2pWrUqM2bMwGQykZycTFxcnNERJR9JS0sjJiYGAG9vb+bNm8fSpUuZMWMGvr6+hISEEBERYXBKsSQVjXzm7k6dyWTi9ddfZ8SIETzzzDMcPnyYZ599Fnd3d31gjlhUmzZtqFy5Ml9//TVWVlb89NNPhIWF0a9fP3x9fTl48KDREUXkHxw8eBBfX19efPFFIiIiWLFiBSaTia+//prKlSvz+OOPGx1R8pEtW7bg7u7Os88+m75fMnz4cF5//fX0mw7ozan8RUUjnwkMDMTV1ZWRI0dSv359unfvTseOHalduzb79+9n5syZtGrVyuiYko98++23NG7cmGHDhlGhQgV++eUXZs2axapVq4iLiyMoKEhH0URyodTUVA4dOkRsbCyrVq1i5syZrFq1igoVKjBs2DAaN27MggULjI4p+chjjz3GzJkzCQgIoHbt2nTq1Imnn36aunXr8tprr+Hi4qKikc/oczTymR49erBlyxbMZjM+Pj7s2rWLatWq8fbbb9OrV6/0O1GJWNrp06f5+OOPWbhwIW5ubnh7e+Pv709aWhonT56katWqRkcUkb84efIk3t7emEwmmjRpwvHjx4mJiaFv376MHj2aypUrGx1R8qnk5GSWLl3KRx99xMmTJ2nWrBmHDx/GysqKNm3asHz5cqMjioXoiEY+s2XLFqKiooiOjiY2Npbly5cTHBzM888/r5Ih2apy5crMmzePM2fO0LNnT/bv38/d9zF+++03g9OJyN9t2bIl/d/79+/nueee4+zZs8ydO1clQ7KVra0tL7zwAsHBwfz444/ExMQQExNDVFSUxot8RkUjHzGbzcTExFC2bFnWrl1LUFAQPXr0yHB/dJHsVq5cOaZPn8758+cZPHgwJpNJ12mI5EIHDhzAZDIxZMgQLly4wFdffUXZsmWNjiUFiLW1NU8//TRBQUGsXbuWsmXLEhMTg062yT906lQ+k5SUhJ2dnT4vQ3IN/U6K5E5ms5nbt29jb29vdBQRQL+T+ZGKhoiIiIiIWFyePWlf91rOWzw9PXVIPgdou8hbtF3kHG0beYu2jZyh7SJvyYvbRZ4sGiEhIVT1rkpifKLRUSSLHJwcOHXiVJ7bQPKSkJAQvKtVIz4hwegokkVOjo6cOHlS20U207aR92jbyH7al8p78uK+VJ4sGhERESTGJ+L7WjlcSjsYHUfuI/ZSIoGfXyQiIiJPbRx5TUREBPEJCcx/4lmqFvYyOo7cx6kbYfTf8IO2ixygbSNv0baRM7Qvlbfk1X2pPFk07nIp7YB7JSejY4jkKlULe1HHq5TRMURyHW0bIplpX0qyk25vKyIiIiIiFqeiISIiIiIiFqeiISIiIiIiFqeiISIiIiIiFqeiISIiIiIiFqei8af460n80iWIwC8uGh1FJNe4GH0Dp/+NYeDGH42OIpKraNsQyUz7UvJ3efr2tpL9bsemcOqHa1zdF03SzWRsXawp5utKtV4lcPS0MzqeSI7bcvE0my+e4kj4VQ6HXeFmUgKNSpZjyzNDjI4mYihtGyL3VpD3pVQ05B/djklhx5g/uHUlCU+fQpRq5k7cpSRCttzg+oEYmk2pgnNxe6NjiuSoWYf3sPbccRysbajkXoSbSfq0aRHQtiFyLwV9X0pFQ/7R8cVXuHUliUqdilKzf+n06WfXhhE89zJHZoXSaOIjBiYUyXlv1G3BpCbtqOpRlEuxUXgvmGp0JJFcQduGSGYFfV+qQBSNm3/c4swvYdw4cYvbMSnYuljjWtaRco8XoVRTj399bNzlRC5uiST8cCwJ4cmkxKdi72GDV21XqjxTHKeiGQ95mc1mQrbc4OLmCG5dvU1KQiq2haxxKeNAucc9Kd3s/9cXdS6e0z9d5+Yft0i6mYK1oxWOhW3x9HGhRr9SWNmYsuX7kRUpCalc2nYDawcrqvYqkWFexaeKcm51OGFBsdy6lpSvm3h+tv9aKF8e3In/lQtEJt7Cw96Jmp7F6VezHt2rPPqvjz19M5yFxw6wNeQMobFRxNxOpJiTC63LVWZs/daUcXXPsLzZbGbh8QMsOLqfc9GRxN5OwsPBEe/CxehXsx5PV62VvuyhsMtM27+dgGshXI+PpZCtPSULudK8dEU+atYeW2vr7Ph2ZFmDkuUMXb9kP20bD0fbRv6mfakHp32pAlA0LmyK4MjMUExWJorXd8O5hD1J0SlEnbnF+V8j7rtxXNkbxYUNkXj6FKJwtUJY2ZiIDUng4m+RXAuIpsW0qhnOrzu+8ApnVobhVMyOkk3csXWyJvFmMlFn4rniH5W+cUSfi2fn6D8wmaB4fTecitmTHJ/KratJnN8QgXfvEljZGDdo3PjjFqm3zXjVKYStY8YcJisTRWu7cHFTJBFH4/LtxpGfzT8awIitq7C2MtG+YnUquRchPD6OwOuXmH14z313pn45c4y5R/bRvExFGpYsh52VNccir/Nd8AHWnzvBrl7DKO3ilr78+F0b+Ozgdsq7FqZbZR9c7R24diuWwOuXWHn6aPrO1OGwK7T64RusTCbaV/SmvGthYm4nci4qkjlH9jGpcTvDd6Ykf9O2IZKZ9qUejval8nnRiAlN4MisUGycrGk6uTKuZR0zzE8Iv33f5yjTsjCVOnlhbZvxBl3XD0az98Nz/LH8GrWGlE2ffnFzJA6FbWn1RTVsHDL+UiXFpKT/O3TbDdKSzdQfU4ESDd0zLHc7LgVr+6zdEOzs6jCSb6VmaVkAtwqOmdZ3L3GXkwBwLnHvX/xCJe9Mj7uSmOV1S+5wIvI6I39fhaudPZufGUz1IsUyzL8UG3Xf5+jlXYdhdZpib5PxT8jG86fovvpbpgRs5avWXdOnLwgOoISzK/ufH4mzbcZ3riISbqX/+/sTgSSlprCsw/N0eqRGhuVuJsbjZGubpdc4PXAXUQ9wfvijRUtmWp8UPNo2MtO2IdqXykz7UlmXr4vGhV8jMKdC1WeKZ9owAByL3v9Kf8ci916mmJ8bLqUdCDsUm3GGCaxsTJisMx+qs3fN/O2+10ZgVyjrP5aza8KztJHfVaZV4SxtHCl/bnC2zvd+J8DG6c70B9kwJXeYc2QvKWlpjGnwWKYdKYDSLu73fY5ShdzuOb1dhap4F/Ziy8XTGaabTCbsrK2xMWX+ffd0dP7Lcnf+f6+dJg8Hp/vmumt60C5CsrBTeFcfb1/tTIm2jXvQtiHal8pM+1JZl6+Lxs0/4gHw8nV96Ocwm81c2n6TkK2RxFxIJDkuBXPa/8//+7l/pZsX5vy6cH4fdoKSTTwoUqMQhas6Z/olK9XMg3Nrwwn46Bwlm3jg+WghilQr9I+t95+0nWPQAGC+8z+Tcac+ykMKuBYKQNvyVR/6OcxmM8tOHmLx8YMcjbjKzcQEUv+yYdj97RSOZ6vV5ptD/vgt+pxuVXxoWqoCDUqUw83eIcNyParUYkaQP8+uWUS3yj60LFOJRiXLU9G9yAPlO/nSmId+bVJwadsQyUz7UtmoAOxL5euicbchOhTJ2iHlewmef5lza8LvXLRUxwWHwrZY291pziFbb2RqwD79S+Fc3I6QLZGc/uk6p3+6jsn6Tmuv2b9U+jl4HpWdaTq5Cn+suMaV3TcJ/f0GAIVK21OtZ4n7nu+Y3Wyc/71lpyTcmX63jUveEf3naRMl/+Gd16wYvWMt04N2U9zZhTblKlPS2Q2HP08VWXz8YKZ3TKc270BFt8IsPHaAT/dv49P927CxsuKJ8tWY0qI9Fdzu7CzVLV6G354exJT9v/Pz6aMsOREIQFWPooxr2IYef7kwVsTStG2IZKZ9qYenfal8XjTuNt/EyGRsSz/4DzEpKplz68JxKetAsylVMl3Ic2nnzUyPMVmbqNTRi0odvUiKSibyxC0u77zJFf8oYi8l8tgX1bD68xzFwtWcafhOJVKT04g+G8/1wFjOrwvnwLQL2LnaUPRRl/tmzK7zCguVunveYNI959+dXqikwz3nS+7lZn/n0PeVuGiqFvZ64MeHxcfx9SF/ahQpxtZnX8HFLuM7R8v/OJzpMdZWVrxapymv1mlKWHwc/lcusOLUYX4+fZSTN8I48PxI7Kzv/DlqULIcP3fuR1JKCkFhl9l08RQzD/nT99dleDo507LM/W8DqPPQ5WFo28hM24ZoXyoz7UtlXb4uGh5VnIg6E09YUAwupR/8h3jr+m1IA6/aLpk2jISI28Rfv/cvzl327raUbOROyUbu7B5/moijccSEJOJeKeP5tNa2VhSududODIVK2BP4xUWu7ovO2saRTecVFq7ijLWdiRsnb5GckJrh9ZvTzIT/eT6lp0+hLK9bcof6xcsQeP0Sv13846F2pi5E3yDNbKZ1ucqZdqQuxUZzPvrGvz7ey6kQXR6pSZdHavLUT3PYFnqWY5HXqeNVKsNy9jY2NCxZjoYly/GIuycDNv7ImrPHs7YzpfPQ5SFo28hM24ZoXyoz7UtlXb4uGuWf9OTCxghO/XgNrzqumTaQhIjb//rR705ed+ZFnriFOdWcflFSSkIqh74Owfy38puanMaN47fwfLQQpr+ccJeWYiY57s7CVnZ3pkcei8O1vGOm8w2TopMBsLbN2gl72XVeoY2jNaVbFubipkhOLb2a4UNmzq0PJz7sNl51XPLt7djys5cfbcjco/v4aN9W2pSrkmmH6lJsdIbbb/5dWdc7h6L9L18kNS0Na6s77yrF3U7i1d9+IiUtLcPySSkp+F+5QMsylTJsF8mpqdxIvHPur8Of79juvnyemp4lMp2fHhYfl2G5+9F56PIwtG2IZKZ9qYenfal8XjRcyzjy6KAyHJ4ZyrbXTlK8nhvOJe25HZNC1Jl4bJ2safJB5X98vIOHLaWauXN5ZxS/v3YSr9ouJMenEX44BitbK9wqOBJ9/v8PQaclpeE/8QxOXnZ4VHHCsagdaclmwg7FEncpkWJ1XXEtc+fQ/Jlfwgg/FEORmi44F7fD2sGK2JBEwgJjsHW2plw7z2z//txP9T4liQiO4+zqcKLPJ+BRxZnY0ESuBURj72bDowPLGB1RHoJ3kWL8r1UXhm9dScMlX9K+ojeV3D2JTLjFweuXcLN3YEOPgf/4+OLOLjxdpRbL/zhMwyVf0LpcZaKTEtkacgYHGxseLVqCI+FX05dPSEmm/c9zKefqQb3iZSjr4kFiajJbQ85w8kYYT1aohvefd/j54uBOtoScplnpilRwK0whWzuOR15n04U/cLd3oL9P/Wz//tyP/+ULfBscAEBc8p13wM5GRTJw44/py8xu94wh2eS/0bbx32jbyJ+0L/XfFPR9qXxdNADKt/XEtawjZ1ZdJ+JYHFcDorFzscat/J1Ps7yf2kPL4VTMniu7bnL+1wjsXG0oXt8N714lCJhyPsOy1g7WVH+hJBHBsdw4eYukfdHYOFrjXNyORweXoVzrwunLVnjSE9tC1tz8I54bJ+Mwp9650Kr8k0V5pLNX+jsARrJztaH5lCqc+uEaV/dFEXniFnYu1pRtXZhqvUr86zsYkrv196lPjSLF+F/gDnZeOseas8cp4uhETc8SvFiz3n0f/83j3SnvVpif/jjCrMN78XR0pn1Fb8Y3epzn1i7OsKyzrR0fNH2S7aFn2Xv1ImvOHsfFzp4KboX54rEu9K1RN33ZgbUa4u7gyIFroey9coGUtDRKubgxsFZDRvg2S3/H2EhnoyJY/OeFuHeFxcdlmKadqbxL28bD07aRf2lf6uEV9H0pk9lsNhsd4kEFBgbi5+dHi2lVM52jJ7lP1Nl4tr9xioMHD+Lr62t0nHzr7nax+7lhmc7pltwnKOwyTb7/SttFDtC2kbdo28gZ2pfKW/LqvlTWPjJRRERERETkAahoiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxdkYHeC/iL2UaHQEyQL9nHLWqRthRkeQLNDPKefpe5436OeUszRG5w159eeUJ4uGp6cnDk4OBH5+0egokkUOTg54enoaHSNf8/T0xMnRkf4bfjA6imSRk6OjtoscoG0j79G2kf20L5X35MV9KZPZbDYbHeJhhISEEBERYXQMySJPT0/Kli1rdIx8T9tF3qLtIudo28hbtG3kDG0XeUte3C7ybNEQEREREZHcSxeDi4iIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxaloiIiIiIiIxf0fD79k2pJ4Q0wAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10, 5)) \n",
    "robust_classifier.plot_tree()\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "0905099c",
   "metadata": {
    "cell_id": "00008-73938505-0bb7-4f8e-a9ef-b6b4e57515e0",
    "deepnote_cell_height": 52.390625,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "<!-- <font size=\"3.5\">But when the budget is &epsilon;=5, we see a change in the tree, as we allow up to 5 points at [0,0] and [1,1] to switch to [1,0] to potentially be misclassified. With the non-robust tree, this would decrease our accuracy to 8/13 in worst-case.\n",
    "    </font>\n",
    "    \n",
    "<font size=\"3.5\">If we think it through, the expected tree will classify points at [0,1] as 1, and classify all else as 0, as the allowed perturbations will not change the assigned label, making the worst-case accuracy 10/13 (the maximum worst-case accuracy)\n",
    "    </font> -->\n",
    "\n",
    "But when the budget is increased to 5 (adding more robustness), we see a change in the tree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f8d8aa20",
   "metadata": {
    "cell_id": "00009-84267e8d-61ab-4b67-96a3-267ef2c17411",
    "deepnote_cell_height": 112,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 246,
    "execution_start": 1664769729224,
    "scrolled": true,
    "source_hash": "99f32af8"
   },
   "outputs": [],
   "source": [
    "robust_classifier.fit(X, y, costs=costs, budget=5)\n",
    "predictions = robust_classifier.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4c661313",
   "metadata": {
    "cell_id": "df737d5517474c38b9817275eb637593",
    "deepnote_cell_height": 362.734375,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 871,
    "execution_start": 1664769730985,
    "source_hash": "a3f1115a",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#########node  1\n",
      "Feature:  X2 , Cutoff:  0\n",
      "#########node  2\n",
      "leaf 0\n",
      "#########node  3\n",
      "Feature:  X1 , Cutoff:  0\n",
      "#########node  4\n",
      "pruned\n",
      "#########node  5\n",
      "pruned\n",
      "#########node  6\n",
      "leaf 1\n",
      "#########node  7\n",
      "leaf 0\n"
     ]
    }
   ],
   "source": [
    "robust_classifier.print_tree()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7b026470",
   "metadata": {
    "cell_id": "b6030aada5fa49b183a42ecdf239fc94",
    "deepnote_cell_height": 482,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     390
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 489,
    "execution_start": 1664769738100,
    "source_hash": "21ef3048",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "robust_classifier.plot_tree()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "d451b6c3",
   "metadata": {
    "cell_id": "00010-a64753d8-356d-4c57-8ad0-03c7c908edf9",
    "deepnote_cell_height": 130.796875,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "## Example 3: UCI data example\n",
    "Here, we'll see the benefits of using robust optimization by perturbing the test set. We will use the MONK's Problems dataset from the UCI Machine Learning Repository.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d670f9e1",
   "metadata": {
    "cell_id": "00011-e6a08559-7fd6-4a5b-94d9-b9390eeccd3e",
    "deepnote_cell_height": 76,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 1,
    "execution_start": 1664769742991,
    "source_hash": "746a4dbc"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from odtlearn.datasets import robust_example"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "d8632b13",
   "metadata": {
    "cell_id": "41f21d35d18f40339ee6a1475ca5b04d",
    "deepnote_cell_height": 52.390625,
    "deepnote_cell_type": "markdown",
    "tags": []
   },
   "source": [
    "Fetch data and split to train and test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "44b9d106",
   "metadata": {
    "cell_id": "00012-ca63f712-e49e-423a-97e6-ef5b95341980",
    "deepnote_cell_height": 268.6875,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 508,
    "execution_start": 1664769746611,
    "scrolled": true,
    "source_hash": "6f3fb272"
   },
   "outputs": [],
   "source": [
    "\"\"\"Fetch data and split to train and test\"\"\"\n",
    "data, y = robust_example()\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data, y, test_size=0.25, random_state=2\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "cc714a7c",
   "metadata": {
    "cell_id": "00013-6684517e-c0ae-464f-8632-05eacb7895eb",
    "deepnote_cell_height": 52.390625,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "For sake of comparison, train a classification tree that does not consider the scenario where there is a distribution shift:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bdf7635f",
   "metadata": {
    "cell_id": "00014-6bf44759-2856-4316-81b4-1f9491d09c83",
    "deepnote_cell_height": 950.1875,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     null,
     20.1875
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 17487,
    "execution_start": 1664769775115,
    "scrolled": true,
    "source_hash": "ec914ba0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RobustOCT(depth=2,time_limit=60,num_threads=None,verbose=False)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Train a non-robust tree for comparison\"\"\"\n",
    "from odtlearn.robust_oct import RobustOCT\n",
    "\n",
    "# If you define no uncertainty, you get an optimal tree without regularization that maximizes accuracy\n",
    "non_robust_classifier = RobustOCT(depth=2, time_limit=60, verbose=False)\n",
    "\n",
    "non_robust_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "885385b9",
   "metadata": {
    "cell_id": "cede983182b840ca830bf41e836d1abb",
    "deepnote_cell_height": 362.734375,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 680,
    "execution_start": 1664769792015,
    "source_hash": "388e377f",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#########node  1\n",
      "Feature:  Feat1 , Cutoff:  2\n",
      "#########node  2\n",
      "Feature:  Feat0 , Cutoff:  2\n",
      "#########node  3\n",
      "Feature:  Feat3 , Cutoff:  2\n",
      "#########node  4\n",
      "leaf 0\n",
      "#########node  5\n",
      "leaf 1\n",
      "#########node  6\n",
      "leaf 0\n",
      "#########node  7\n",
      "leaf 1\n"
     ]
    }
   ],
   "source": [
    "non_robust_classifier.print_tree()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f122efea",
   "metadata": {
    "cell_id": "d2858316c41d4fa0b972e1dd756b0fd1",
    "deepnote_cell_height": 534,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     406
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 747,
    "execution_start": 1664769792016,
    "source_hash": "3d490653",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10, 5)) \n",
    "non_robust_classifier.plot_tree()\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "77bf18eb",
   "metadata": {
    "cell_id": "00015-511ab703-4b9f-4c99-8b26-95f27e2ee80e",
    "deepnote_cell_height": 97.1875,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "Train a robust tree. First, define the uncertainty. Here, we will generate a probability of certainty for each feature randomly (in practice, you would need to use some guess from domain knowledge). For simplicity, we will not change this probability by data sample $i$. We also define $\\lambda = 0.9$, which in practice must be tuned.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b641c408",
   "metadata": {
    "cell_id": "00016-14b459f8-9786-4b71-9007-d9a68d7c69aa",
    "deepnote_cell_height": 257.390625,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     39.390625
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 680,
    "execution_start": 1664769798155,
    "scrolled": true,
    "source_hash": "5f369a82"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.94967142, 0.88617357, 0.96476885, 1.        , 0.87658466,\n",
       "       0.8765863 ])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Generate q_f values for each feature (i.e. probability of certainty for feature f)\"\"\"\n",
    "np.random.seed(42)\n",
    "q_f = np.random.normal(loc=0.9, scale=0.1, size=len(X_train.columns))\n",
    "# Snap q_f to range [0,1]\n",
    "q_f[q_f <= 0] = np.nextafter(np.float32(0), np.float32(1))\n",
    "q_f[q_f > 1] = 1.0\n",
    "\n",
    "q_f"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "d8118dcd",
   "metadata": {
    "cell_id": "00017-e2c44d63-a2a7-40c3-873b-173219fa4020",
    "deepnote_cell_height": 52.390625,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "Calibrate the `costs` and `budget` parameters for the `fit` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7a563a91",
   "metadata": {
    "cell_id": "00018-8348cb86-a857-4d9d-a5ee-44cda4446659",
    "deepnote_cell_height": 184.1875,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     20.1875
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 334,
    "execution_start": 1664769801529,
    "source_hash": "8febf87c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13.275424972886112"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Define budget of uncertainty\"\"\"\n",
    "from math import log\n",
    "\n",
    "l = 0.9  # Lambda value between 0 and 1\n",
    "budget = -1 * X_train.shape[0] * log(l)\n",
    "budget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "68ef855d",
   "metadata": {
    "cell_id": "00019-a1add7b6-8e21-46a1-87b6-e6a2d74ef071",
    "deepnote_cell_height": 793,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 28,
    "execution_start": 1664769805562,
    "scrolled": true,
    "source_hash": "7f3949b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feat0</th>\n",
       "      <th>Feat1</th>\n",
       "      <th>Feat2</th>\n",
       "      <th>Feat3</th>\n",
       "      <th>Feat4</th>\n",
       "      <th>Feat5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>2.989182</td>\n",
       "      <td>2.173081</td>\n",
       "      <td>3.345825</td>\n",
       "      <td>14.275425</td>\n",
       "      <td>2.0922</td>\n",
       "      <td>2.092213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>126 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Feat0     Feat1     Feat2      Feat3   Feat4     Feat5\n",
       "0    2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "1    2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "2    2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "3    2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "4    2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "..        ...       ...       ...        ...     ...       ...\n",
       "121  2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "122  2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "123  2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "124  2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "125  2.989182  2.173081  3.345825  14.275425  2.0922  2.092213\n",
       "\n",
       "[126 rows x 6 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Based on q_f values, create costs of uncertainty\"\"\"\n",
    "from copy import deepcopy\n",
    "\n",
    "costs = deepcopy(X_train)\n",
    "costs = costs.astype(\"float\")\n",
    "for f in range(len(q_f)):\n",
    "    if q_f[f] == 1:\n",
    "        costs[costs.columns[f]] = budget + 1  # no uncertainty = \"infinite\" cost\n",
    "    else:\n",
    "        costs[costs.columns[f]] = -1 * log(1 - q_f[f])\n",
    "\n",
    "costs"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "873b1077",
   "metadata": {
    "cell_id": "873b53227f2847c48fd956daa42241d6",
    "deepnote_cell_height": 52.390625,
    "deepnote_cell_type": "markdown",
    "tags": []
   },
   "source": [
    "Train the robust tree using the costs and budget."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8dc237ab",
   "metadata": {
    "cell_id": "00020-17db6a05-404c-4fb0-9b35-d58abc3aa541",
    "deepnote_cell_height": 184.1875,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     20.1875
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 115497,
    "execution_start": 1664769815612,
    "scrolled": true,
    "source_hash": "ae6f9fa2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RobustOCT(depth=2,time_limit=120,num_threads=None,verbose=False)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "robust_classifier = RobustOCT(\n",
    "    depth=2,\n",
    "    time_limit=120,\n",
    ")\n",
    "robust_classifier.fit(X_train, y_train, costs=costs, budget=budget)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5ee04af2",
   "metadata": {
    "cell_id": "6ea60076b5ff4d4db35fef0d61992e3c",
    "deepnote_cell_height": 362.734375,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 2,
    "execution_start": 1664769931108,
    "source_hash": "a3f1115a",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#########node  1\n",
      "Feature:  Feat3 , Cutoff:  2\n",
      "#########node  2\n",
      "leaf 0\n",
      "#########node  3\n",
      "Feature:  Feat2 , Cutoff:  1\n",
      "#########node  4\n",
      "pruned\n",
      "#########node  5\n",
      "pruned\n",
      "#########node  6\n",
      "leaf 1\n",
      "#########node  7\n",
      "leaf 0\n"
     ]
    }
   ],
   "source": [
    "robust_classifier.print_tree()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "986d5b8f",
   "metadata": {
    "cell_id": "02b308f6ab99429d8ffe4d3f4ae0ada7",
    "deepnote_cell_height": 534,
    "deepnote_cell_type": "code",
    "deepnote_output_heights": [
     406
    ],
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 389,
    "execution_start": 1664769931109,
    "source_hash": "fbc9df0d",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n",
      "<class 'numpy.int64'>\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10, 5))\n",
    "robust_classifier.plot_tree()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cf5d1de9",
   "metadata": {
    "cell_id": "00021-3cc7fda4-c89b-43f7-bbf4-7e6ca8a7298e",
    "deepnote_cell_height": 260.78125,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 7,
    "execution_start": 1664769931564,
    "source_hash": "e4bb380a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Non-robust training accuracy:  0.6666666666666666\n",
      "Robust training accuracy:      0.6587301587301587\n",
      "Non-robust test accuracy:      0.46511627906976744\n",
      "Robust test accuracy:          0.5581395348837209\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "print(\n",
    "    \"Non-robust training accuracy: \",\n",
    "    accuracy_score(y_train, non_robust_classifier.predict(X_train)),\n",
    ")\n",
    "print(\n",
    "    \"Robust training accuracy:     \",\n",
    "    accuracy_score(y_train, robust_classifier.predict(X_train)),\n",
    ")\n",
    "print(\n",
    "    \"Non-robust test accuracy:     \",\n",
    "    accuracy_score(y_test, non_robust_classifier.predict(X_test)),\n",
    ")\n",
    "print(\n",
    "    \"Robust test accuracy:         \",\n",
    "    accuracy_score(y_test, robust_classifier.predict(X_test)),\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "10f24f30",
   "metadata": {
    "cell_id": "00022-17f6f113-6d42-41de-97a4-425263e19c21",
    "deepnote_cell_height": 74.796875,
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "To measure the performance of the trained models, perturb the test data based off of our known certainties of each feature (to simulate a distribtion shift), and then see how well each tree performs against the perturbed data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "785bec50",
   "metadata": {
    "cell_id": "00023-6873bd0d-ac31-4d00-9fd8-74d79f46f931",
    "deepnote_cell_height": 454,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 5400,
    "execution_start": 1664769931576,
    "source_hash": "fa02f8dd"
   },
   "outputs": [],
   "source": [
    "def perturb(data, q_f, seed):\n",
    "    \"\"\"Perturb X given q_f based off of the symmetric geometric distribution\"\"\"\n",
    "    new_data = deepcopy(data)\n",
    "    np.random.seed(seed)\n",
    "    # Perturbation of features\n",
    "    for f in range(len(new_data.columns)):\n",
    "        perturbations = np.random.geometric(q_f[f], size=new_data.shape[0])\n",
    "        perturbations = perturbations - 1  # Support should be 0,1,2,...\n",
    "        signs = (2 * np.random.binomial(1, 0.5, size=new_data.shape[0])) - 1\n",
    "        perturbations = perturbations * signs\n",
    "        new_data[new_data.columns[f]] = new_data[new_data.columns[f]] + perturbations\n",
    "    return new_data\n",
    "\n",
    "\n",
    "\"\"\"Obtain 1000 different perturbed test sets, and record accuracies\"\"\"\n",
    "non_robust_acc = []\n",
    "robust_acc = []\n",
    "for s in range(1, 1001):\n",
    "    X_test_perturbed = perturb(X_test, q_f, s)\n",
    "    non_robust_pred = non_robust_classifier.predict(X_test_perturbed)\n",
    "    robust_pred = robust_classifier.predict(X_test_perturbed)\n",
    "    non_robust_acc += [accuracy_score(y_test, non_robust_pred)]\n",
    "    robust_acc += [accuracy_score(y_test, robust_pred)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0b6a4289",
   "metadata": {
    "cell_id": "00024-32351bf0-26fb-4ff1-9892-f9e0b484ca12",
    "deepnote_cell_height": 219.78125,
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 4,
    "execution_start": 1664769936979,
    "source_hash": "8fcb1c0a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Worst-case accuracy (Non-Robust Tree):  0.3953488372093023\n",
      "Worst-case accuracy (Robust Tree):      0.5116279069767442\n",
      "Average accuracy (Non-Robust Tree):     0.47367441860465515\n",
      "Average accuracy (Robust Tree):         0.5584186046511533\n"
     ]
    }
   ],
   "source": [
    "print(\"Worst-case accuracy (Non-Robust Tree): \", min(non_robust_acc))\n",
    "print(\"Worst-case accuracy (Robust Tree):     \", min(robust_acc))\n",
    "print(\n",
    "    \"Average accuracy (Non-Robust Tree):    \", sum(non_robust_acc) / len(non_robust_acc)\n",
    ")\n",
    "print(\"Average accuracy (Robust Tree):        \", sum(robust_acc) / len(robust_acc))"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "117c0143",
   "metadata": {
    "cell_id": "6e94893cd87747d48562368a596e05cc",
    "deepnote_cell_height": 341.59375,
    "deepnote_cell_type": "markdown",
    "tags": []
   },
   "source": [
    "## References\n",
    "* Justin, N., Aghaei, S., Gómez, A., & Vayanos, P. (2022). Optimal robust classification trees. *The AAAI-2022 Workshop on Adversarial Machine Learning and Beyond*. https://openreview.net/pdf?id=HbasA9ysA3\n",
    "* Dua, D. and Graff, C. (2019). [UCI Machine Learning Repository](http://archive.ics.uci.edu/ml). Irvine, CA: University of California, School of Information and Computer Science."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "3ad3035b",
   "metadata": {
    "cell_id": "3d9344a051214b0d8722d3aba9faa162",
    "deepnote_cell_height": 46,
    "deepnote_cell_type": "markdown",
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "deepnote": {},
  "deepnote_execution_queue": [],
  "deepnote_notebook_id": "48fbaca3-de19-4cc4-b8bd-5da9f4b14110",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
